<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',5);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => "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"
        ),
        'EN' => array(
            '42' => "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",
            '32' => ""
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B06;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) Error("Can not allocate the data on RAM");

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
