<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',5);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => "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"
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => "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"
        ),
        'EN' => array(
            '42' => "eJztfAt4U1W28Al9JOXZyqgU9dI0Pmo6KkSoJQOn6KCMDqJX5aFEwBltjhQplEL6TIsFC5SXvBUQBRR5mbZQYmllaCJI0jmO7UBnwtxzxwyTzHVilIKBQmly19r7nDzatMzju9/3f99v1J6911577bXXXnvttdbZx8uCq8vlcDmUDDM2ddicTn7tPuu+ecyPvx9/P/5+/P34+/H34+/H37/9C9wUQH6b527m/s95+fH3//hPtnfujrlh1SNzD4ZXLXOPh1db5trCq1/P/WN49fu5fwuv+udeCa9m5sTl/GssvpiT1WdP2dycOREIsuU5C3vp0e/9nNW9NTXk7OutqS3H0ltTe47QW9PAeR29Nd01b2iE6y/bO+/uKLGATAb/3uyHWEE0hhaZcCDTE592YhgmvA0q/PnlamZO6vOcUTOcU6mMmjs45SOMS3kn5wK4SqXiTy5X9v80lZmjHc61xUzX3sG1za61X5jH51WqlZwqVckpmX4u/s3K1Dc45WYuiZElp+Zy6ie51IWc9k4u917Go17IJacuosVFUFxMi4uhaKBFAxQLOeWrDCGUw5k02Rx/+ZiyP+My+ZRzcvjm5cqfkPLCsPLqsPK+sLIlrCyElTtImdIcOg/KbEBTzKmf55KmMMlGVXauCybA7zWbfPzTH5o0pZy2GNlzKYfM47+oz2D435qtCfPVpRxbvldTwrFlezVGTjnkUxc/rFFrpKgpiKot5Y5Bd/7SR4AQQcToA8S2gL7dnCYrMVscb0itK3KgdZZqmicplkl2RUBbFqnyeqCllsGKreVgwdZx2rWc2VIwn4//yOqcry7DZYTJAIbUaw/28s4s48IonQiHrQWe2mS7pmuPcXqobIJyrU+7ToKaAbqOQkXO7ffNjxSOzPr7N3jNPvVxguaLaGw3WL+XGqO0aBs4H7Q6G6N1Exv17VFbed1hzSqOvaFeyTUCnw3A5yqJ+38CuReOCX5bV9+tvTf5++zojy4jzWqOf6wy6VWGj2lQubSryf5wmr3P9SJTzWoKfJtD7epV9JFo/xAOaK++vffF7IkdfQF7IdwHrvZTTl3VhxohSv1NUNZzEXpOdkwF2eqT6VZPXQ6migG5ltTZ/7hQvRzMXQXn0q6n9iiXS3aFWEYwn2cGAtY/LwQ0FZS6baMK3EZ0bB8fvxlK7EAf//Emftx7YE1ubFfnwHZdz7H/4eNLN2FFva5X9pMP49+GT5DIEEKElhOxrIwFG/n+apNGodO8xkkjrjkglU4eFCVQxY0LEzoU4xX3J3a5tFVcJNjj5KuOu3j91pBwz3Iov9Wc2c7n8Xd9CA1JgYBax1FpAdqvqxCZtIAJXc8p13Ojw0RnhMGJ9k+H0cj+qbWnLApDgL1nUN/BAaTx/Ld5Js0WnAhYGc0KXHzNSg53vXYl/LcCdv/RrbhfApbiRaw/KrSrG1SLDfY1i+Dp4701yKXCxw738Y/WwXpQafIr60h/+1GKVl8rot0ZHe1PFO316qho4bz3YAeYfCQ/GuuP5PecJ+X9yXwy2nCJ99sjmdLsA0mCEoIG8683mO35+UpGBnUl1N9dbTXmL0GNVBfoYMXOl+YH9wRQ3pUPUtccI2cTAQDzADBzweXXNITKPv7sJnaQj//5ehEU5EqqeMMrRIhShYiKVkKKAXq1hUMdQ4yl78DQRFFgM9NjJWsx6N14UAhtqBd7w/AvUFoZhRLqXZAUSqAqvJXQDFXFrUKbnIawGoyFVRz2X2BsxBLlam4Mjr4mgrc1nKHNb5mwBNgeh2zDSmwJrURo02YEogGZ0PFx6SOqHXh4hG90sFzJqCQBBrUDVKP10BKoIGYFqGA4ufDTiDIaYcJhjurVXGOrd4kJitb2JZuowQihoIj6IoGzRd0O061IsxSySGj1ghiijKXVU5MNQw1pFfVWfGEHO3VWWqI6A0iYrB+bIvJg8hEgQ7a4LLJC3JCvP9HacWXd5bhr4DkBnuzIEIMgBeRrNcfKcML7OVSw1eA2W9QF2ADeB5ACvQDx+PjMzYBk9RWgpbU8XkBgGasAZrb7CtDGkqbxlmm0idh4pNbPwlEIsfUIkVsMBeivitVXLRvE4XAgfo2ZjoOn31M9T7/v38DTr8dxmd73YaiK7NFCjz8tMi8vhLVwl8HcrUOweKUcxQAgmf2uQsBAx7qK0+wn7JIIAYMGl/oNjvjfJ5cHV1uVujQYQywFLqAZ0USUMcfw7wfHeHWjWFjbQLu65ZrXOX57auhIO3lzl6Lp5iiWm6JEKjFsLar73Y7cnjsxoyhsJ66JvhPDN+DqnoRxU1bBpnyziGzKt4rIplwTdVOaLceLeO/eaDP5qoiP+TBKg6hf4iYJ2wo3iuhW6FfMPixuBXZMaE9gLNWnMek23y29ihcPo9BRpsg6D+pzliOn1P41ZEMo8aE5y/U5HliuaFHIP85gr53dMZqZ0tjTCKmpHP9NnUnzIqd5idO8AgseSNVxQb9NcwqRQFlhnU5z7g7wCY9qToefvhmrooVEIuQHaavCJl5Swsb6+Cc39NjGZAuFd/DOXBolDIyABYPM4B53SHsc3L0vOL4MPVTrrAr4N6ia/5pl7n0vreKCR6SPn7Otd10OYhLLyj99JCo44SiCx70nNh4njbaQrNkAjtL7KRiMyUpvflKKugkH+Alk2i2vrKzEFljjL0D7xDXWglb8itOCYvyaVH/FgZ5of42qYqWaDYYWCL9ECL/IhXmjlgVG4BfcTR84niHHUXJIiOmnboDo9FM3Az391Gi23gWOo8tlArMe3aqf4SI8nCri4axHK05dm3Wia3PdCJHAGBp9hLs2VcS1GVYmxgmivx9FjceXUd1CY4PpjDAHfE4ZmoDQEkfx1em44WFEVZQwwlEWzRcHaBS/3VHWm4f+fRkhHlQtXI9uvadDhSh+rf2+cnY0mkSTj/iNHVtEU/lAOUyDhomhOcBBc4zTVHL+wa1by2F8kNL9HvUDHD25l5JA0rquXP0WBlCbLBXlcDaqjFHUEuEqsQO6oQHLK+XdUlrikDOIjk3v3VpJ3d4IRtMhs7IizISQIUU+u2WfejU7QW0nLcfmSqckKKVMzZySHThwijc1eEoqd82ezn/aWOrTiqjb5oZtQLPFsJTPq+QvH+OvHeK7DiFViJExit26FPdiC4dBM5T+DeNv7CvH8Q+cHSeiprjCIdpSYtfg0cc5uJvsDDJHsinOUqyz4fLoZpLDLOeqbpYzzM0Lj4Yg5FkfHuNEc0DC9vhq2OMBC2yEfngO/TNC6S7BCMyetvYaTpuNw1Ewne06dQ7v2fjYRF5X6RPUr1aosytSKypK6j5nmHaAtXc5BWdLk9OaGT01/3/0O/z//U/GMJfVw+ZcczhxBRydtknOlqdaLuiKzWdqz5w6V+Aepi8gZ2Nl5dJc7y8z6xOKn3rh5fFpqQCYdDf98Yn1p8654hlvNSwhVDz4X+K3npZ4xVPnTrkymEFp8hdeHkoQmu5O9LY0cWAt8Ve6NLdE7/2ltj7h53FnCI2nPMoUJhkQk+DR0pT4d9vEp62z6/Hvncdt1tp9NofT0dLkcDmsFxuCZW+1raW96ZxhQEHNGRgJqqwctOqyrGuEVj/T3XEl1luo0c9UMgVJigLBxWfJBGcnUUab4BLAhglj8XQVMvwM6SgYAsL8WCE7TnhCLkxJEKYNEmYNgH7x0C8zdpxg8AvGAOIZ/cI1EJuzCX4XHL0TeyIOeidg78GkN6kPhHo3Ot1ouB4WMrqY7pSmyIX5CiE7QZjVX5iGbN2ChOOFRV1CnsTY/C4hO8Tbv0b21n+ArLpA553tjhk3qWRE6YhD+tIRJSMO5x7SJ160uW+fpNXN9Ln/p1rWVXZZo5vpLexst5mw4i2MH+EtBE4uBNmi4uYPLBcWxwr5cVLSbH8lm4BGRFyN7jISjHFtr2Tt8rFFwpa4rF3Se48LlaTh9KOCIQ5KUbs9it1eiug2fAVpOP1KL91QdNayFZQXI9GReCFbbsQFPRFofWEFK7OuBBoB4YS/9Vcr2ADWCLKKzoriQyVeyJcLYxIEY4Le1Hh+zAqTJFIYDQ5uFR7Pmr+sgD+/XAlBumalY8iQIbnuEXr26w9zIehfo3N3TAKQW16tZGYYkmQzmrzVDk+yy5PETDjHT17ZooWO5WlZ8Sd/oRzBJJ+LTxw+1BGvGNGclNhZ6DCkJ150AiZSg8D27hK3PGWIqaRNoS89nZI7MrbktEKf7Hk00QpIM87x7SI5+5hV8cMIPSQHRK4rExnE81jHrGIc8SkOWSBwKoYt5ytX8ltWVmYOhsIFVzJ/YKXzQuXIb5oG+/kVKweeeXSKqnlYc/IpmYw5u25lzLD/GliZEmNU3f7Hyuak5sRhlxSnzvF/XGm8RdUytAl2tGXrSoUNYC7+JACdEvQgQEvlcrlb/kwJiuLrSWzH3ho9O+LD6txiCi+S4LtrprMj9lTPtkkM3rvKW12ZOQiewB9YG2DPg+zdtyqSvQdXxQwTurEXuZVgLxnjcj1qHUcU9sVVoAQvVaH6gH5kdPWzrlulfK7KJRi7cit36T3OZCgG7u3Pv9zgPD3SQMvpDYg8pguQ7mV4F5DJXsXeJu7MDL/M5IMDm43xgZnwITE+5i2z5bEqZTwcutfPuth40sJvektY3Cnk35CyRpafVXlnXj+rvnE2GYKHcz3wSOXZt4T5nUJ2qNNjVZJNiqNZHwxIdBwMlDqLY+M1czhxhrQzwaVeqAnAI0eOfHDiz58NRN08D9NXFERQFVXoVUMwPIe7kkinqp7F8ZtWiKNDfxvxBRU6s31PVdjelZO9EHN6hr7U/XUusLk8F3cEHBjClAHCEwmGnybecA5Ki0t2WVurqGErdA+7MkFf6JaPgF95rvDEALDqplOu2xQvP4roOXffaum32tnEpizPbb1jNatYpk/8OtzMwcHmar4vt/m+5bnNWfjP7FK33Kcoan4I/wFWitzIVkUuMDJ7kardH5MpW5Re5O44PUHvglMK5trf4RrMJAViFPvSBk9S7BvRnPxI8/DmOxJ9CsUk4+5qg8q4p8bgvNsR0z4+pdV2ObVA1xkhPO0pLjdJw/A19cJiv5AfIMI5TTwvamQgdJx6HOKzn6wBsB5ffJ+WXjb0X7NEmO8XsgPemeR9Q2t/ilOOYS4s57A1RMx/X229fQ2/q8oUzWKGvHmjZionAfZRwLQggIYGEKZIgFMUMCMIOEsBLwYBFyjgpSDgEgXM5PrmQzuVM0TwoZ0WAhA+tNNDAMKHdkYIQPiAAN8QwQfE+oYIPrQzARBNmxELfBiP+nEumS4JoLpl6l9zR+05a6m8k5hYsY3Wezvl4WybH0uOlGw4hePfoh4GuMrwp1LfvowqHbYb/bBVunAjRzQAepdbbm9bK4zGnpSgAf2KLSJNcRI9fAHXw5hcH7WW2gT1ixxIcRkQBMnAeNpnpe3ZZZ20jpoKF+59EL7wVoC/f7UwGpgKqKdxm7JaR64DNqTdG6G8Uwkx0Arg1OVM8gfADsIzAE++aC0sCzFNQMgHw/NDl/eg4NJmc2YLux5l3A+fM7jxdnY9K9Nkc8rXuNFY12tfQy6069XTMWcDRc86k/Ilbgz/8jp1DkcXQv08FG4I+V3KM9JNlqRXmeTU5zmUw8f44pevXi7MvyFkdwGQrhsgKfuJL3VfwxwQXn7pwSMeBW0DLLPW42vX+LexNtCyYD3uKIzQKWSwpRy5flWqD7GsW28KVQdZPlyP4T2wPZrftc76w3pYCLPFtJ6/uja0GCDyOFw0l7hePvUMDmS8DNeDWuQXudGwJtAXpPBDOMWgbOLfFkUTXSlFqyJ6YpYJG4SMGwzxG6kvtvi6kN+JKmsduwHGbEvBd8lUbCV1JKHy7dvC/OtCdqeKypv4SUa/2b4XJupvSxGfg8Rnf3yS7mH41oVvg9LA5DZhZ9LqEomSCxcUExUyV7yCkdUKwyI7FvfbQkZgkPXbt+kLLMq22Bts5esNeq2eO+qTePeBrEJJTzKBNJwY7SvOQ5ozwM2WX7zdQ3LsJc0anXLuBhc/5G3RiuA7Mv2GQZNeeeO1lMfz8nLztEywm/OCOS1hklHlL8+8ntjhcV4Y/oy7zDBUVegvy/zBZOi2IESFcb4mA50MG9gCvIjOJfhnUzeCcrvUSg59DHcZX76BKLvItN/6y41UhCAugyhkOE7Ndu1GsiBkAXElcPKkNIiIQbvRZICxcU5BFrpLhKyspX2D9cuNhGTxRpTrbAt5+rRnOB+/fUuwN2KJnAQkTqTxA3R8+5eEQn+LaWN6cNZIWeoahSeCX78hZOiSZAxYlbRY1dBhVz0haV4LjL2WwcjiGRIrghce3FXz+wvZA1x05e4HZw2zZMLiLiHfz3+9UVh8Tci/zu9dLrpP868J2dddkk0koRF/crnkPcl9Ygv//gZaQrMSJSLTjuCEE3Hnd21Sp3Mu7TOcz+Qju/u7jT3US0RtDqKyst5x/wNxWz2bWDn6Wer7oceUvnvcRXrctRlfrEKP+6DH0332UHZQScolScrj45uzEm+4Y4hGyN1ZIEe6ODTJTSVLktzSmvnbYiw7NquzREXVTsSTwvrfm7Gln+XYZvV4qeXnoZbxlt9tVv9ManhMbFCPlSCPcmQ1UUelUPLSZpP1lS0U5qIqBAsc1BxRBUQjQ1a7Q8i/RlYbSQrzO4Tsa66I/mS1/WS1E3xiC1ltLMFqs7KwuM5l9DNpg/wPpsn9/dNiVMMumgxOm9GfkgLlDhs2DvCnQOMg0tjd01DfASb7/Hdb1PfAokwO0xE8rpZuoUcbv0oqBCHzttADjBikqA6A9k6y6rdsNZFF706f7LmntoYP4zL6+O8rnQZKGYawPr81eLz2NZx4ovTHSKO1aitUS0+PJC/2D24VEwAecs0piMjHNIgoUQ8p4N1s+e1WiLSnboM1wOXLCDDWX2zDkzSApj1XvLlqhEg/aN2hQU7fdkkYhVxyC6DIw29PPo4k2wKWB+BJBwgE867CFr/lcQkODlB2AFgZ39jqAF7C1jzSfhNuC7eZrAXvEDb/8x3CJjV7ceCoEbs35Z2IgQxdUnUhqd6QphYnzaCLXuPCQleI/xZK6YZ7gg//ZkmzyngH8z7W9HfEM1OcTsCS9o6k2xjZzdlG9mmyqPzgVGb76RRvbCP0aNxBz9IgVkgQ5dvERmWArPbCd2CRCsQhSqNHhzAnzRl8b9P1Do2p6YwDotGgifJmDs+2LM1vOS3PucvwwHBPqKzV8Jz2S6leXqv5kpN6LcJevwtWF2P1K86a+K4JaAEZ6AnYgAHQnnx9Qw3cbaKBg2VTjwJNbxfyL6nHQMEr5H+nfgQKHiH/W/XDUPhGyP87sEpPDZiC6Fcv4ujxAQwIi68K+R2glcJin5B/BZRPWHxZyP9BukUxCuOJ74X8i9aV24X57UL2JWOb31LzLsqXnDIuEerEsxOHoXUV5St4IHmF7O8oDj2usK6iLAvzrwrZHYDjEbK/pTjIE62r6GyC51sIByfQDccnZF8BnG+E7L9THJwSrauoMIT5l4XsHyJwcLbdcHACgPO9kH2R+HHnd78LS6nZEtXLBpPk2f5PeMPWS9sJimRGogRB2hOc2Z6yQ3uW3lQ4QW4qEKtGUyVxZvuLO7S/gXOly2yZvIN/rLLUHXO6H1TVem6TXbsD9h+GD/DQcHi3SM+h088qEYg3ip5Dwtvp4pgMGL3TsndmDs2IvLdDKSMhhtny5U7rezuWkJh85w54YOw0VucPpA0SXLNvYyBy4etiSPKYuGjTJR+2VvQ5PMA4+sLB1OalHcTifLYTMQdantwZiXf+s53AIsY/EofpdN7gZM3gGltH7YR4Yox13E5wxsfTUGJMaE4i2ZQsygh1Gj/bGZoeDAEhljgQQbEsDw1oImEfjowt9vd3dpeWi7R/Sk4crEsKTQgV7RAZNhm0pzG8dCvs/7UTAjAwY+5E+23vBdcw9OUCXRQp0MPeqdSVpJECUYWH3iM6AKpwlqgCLqYJFjVoIpQPk28U4sj3CsNJOSuHfq8wlwtp11VqQBTUgEDjMbzIqfmU09RzmpOcponTWDhcHDTLQga41BnXGOvL75MEhAzfwKLRN9tfex/mOy4C2tUWR8BdbUvFZzmJY47RN9rBs+5asGK2y3aB9QYeYBSZdSrp1KOL2a4SsUSMeIJj7oPsc7vCCPa7KXoFoW/mIjo0RfJwkOA0AaedD1C88QStPhLtS4JWL5GKJTgnI3EuEZyTEk4MPTc721Qh/rSfRna5533s8mmPLg+EdbFEdplKuljwfEK7gDGi/+Hz298D4QqGqyAPwdCBdsTyESBelU7vDulDEyz7fxKkhkgd0A/XKhq2dm7oExX779+HqoTcQdyDjjZNaPtfQWIaK7lx8TlFAXrgz9LmWz/QWlErtZ+jYpKFsK/6AG9LWDhcF7wtIRiuA7TgA8F4XfNJ2D2TaiB3PeifwFGsMQUh5KxtDFbJSfwZZwXSN4AGdDUBMiAAkMzRvg3IX4XtQ0QH/N0QBQOaLrk4S8NdNPsHEcJuvfQB+zAmvAx+slHiclzUeRL3DH90OfV6xHoGA9VxkXVgYzoRUO3Noh2oJt3zmSyO4TXH2TjhhLx16m4hQx6njGNcYNmI4+5yJnUEknHoZhhaToaKgItZFowk0ECf2C0yHMKAIN/XA9huAGeAjcXXTht3qx/iwjImo/awcT4xVdJtLP7eFWbLXXtoY1IcA95VdoIwX2GgkKFYHwAxsIGVWcdKaHImOTJ/Y2nbbVI4xCCndh8Uw4LawTKIcAb7f5rW3/+ztHi/Nq3fYKYwJMHLVIIDRQnG5Yj+QsZlsH0/MMRWkyB73HvU/SAJpq/2oq1PtVzcQ30JKaRz7KH+B3UowPxSatbf7KV4kcQRDN7Ac3vM9lv2ih0x/cAuldwWitGWYkcCODr1iohYZ+ylSavZ5JlKn0jMAiXiTalC2ERMD+wNellIi3g1pejPw4J0ivnPG/D0iY4Wf+9us/1AkLMbwJWxM+RRISnRAzP6RamQjqJfFkxL7d9j/Z+9k59hJj/KTH7meXg8TxJONm1cjtnStReD+xvbeW4PxHsvvWfDows3Ch5eJ+nhhRjQgklZOO8xIYvZXh9/sEq8d0Rf98CKps7iNHPwGhIcjhEOlbKYG60t5tr6Z7XO+5CNIS96UkicWfwhG0/e6Io5FrWKE7MsJHoEL026T6PLoYpOA8qIy014501MsKMEe/0S7we6q1UZTLcrVXh3Lbi/Teoi8HG2fRQxcKjLGz2IrOgB2dMDcqIHxNED0it7IL4xKL5AKDfT49onCrByl/5+TFP1LgGRYPTouRi/PQheMKQrEOXOOJW0sacjzl/6CD3TEnCXXt4nWVp6KYgqI+nivKBQuVQyZqDRnBY7UJXY4VwIzprCbLny8Thr7MeaFft+x9g0Wh2o4pwkRnEH/EwGlUE18emYmIWqBSrgAGoG1qZZu89WUncmPX3i04CqUon3Eb/cZ/Y+lnC+cZ/HlQ74c15XYRf+z/uc09JnpT+RPsWVADvPedLlwVfrnoSJT2PBKZK2KdqbWnwKwaXR6wTluzohg4kRMmQBYeEAYcFAYdEgIW+wq6Ru4tNpyVNUT6gKatJUrlPKHbqknTpw6jJSvNVNTo8SUxqPeUbGyPozSdt13monGEbyvxQ6rJN9F0i4lnpQ5wJ/3ZWUxJge4f/6seAceWlwuWBk/DEp/QZf8ceOvKCEfjMP6uL7G8elxBSWPzN0+AlVimxg4tXmwpTT2nd1gPkbvIUybaDyQx3umKNpsd7nUn4izB8kZA8G6lq9rvmh8UA8M44dDvJUH9ah+H+iuNU723eZ/1Wcov0vP3zcqbDhhFP36GAqrwkwtbT7BeUGOu/wOcsSGOVGXdImHc7RSefODk4bHTnZjTBZ9R4dTJfyAUPxi/e3/+Xl/Z1K5bDUN3XAAZsgOH0Uqd26ap+LioE/HSs4+R37MyGQsXXGa5YkdtHpsQGAn46dpP2Fzp05ZMiQ3/vZsj/5RxTYIu5v9LN8vp/tZ73tAFTGW77aD0fWbQdYlkRbxIsP/6pPMMSxGdJXfcKWOAtzgOI/Eg689QAh2PPtJwkR2XERtIMJL2U2CSvoGalS4YfROGzwvZGY6MalUKlc8QrYBTGqxGtJbx3wgO/grR4W9+Dzj04LhG2tK/SQTJCSqhC4mvbDFMx280H0EkLfY9C8i/htd3hi3iU5AORbDX7EAZrNJLJSHWTHk/usu6oi3qi4xBQnK+Nf26el32asOMjnQt8rQv5VvIIQi7cQTD68gACnnNn+JPIjs5YdjBzV5PPxnrdoNxO5JYB51StC9lXploFwzE8StDhg8G0bFuAAs39wkB0rMWgMRLli2XOBehfZxUM3FVmkeGYcwoNtrK5vIZmCMkoazqjH6og/0niIiKPxUFBo0s2NMJmVUqQjh3rKbNM/JTMU1e8PUVGZNA0c3jX9m0QVv8IJJamD4pUExye/a+PjPwJ/4BD5kL7bcRFp5lHnI7+SBT7YEaGtE7BMORx+rbfHSUGvutL9ImYce7wh/oIbh4cJOZOC183T0ZvqcQk9PZ0tO9H61WHJmZeOHPS72gIW+SfaBswEWOWfiC+nMXneCuAe5y5e6D72SbfMbkTeWH2SfiARlik2qpsivo+wOA9jquoLTnOGC/aDcCq8C8RVwEuPmfQ8bCO8hQiU4NlOvbkoN/P/8AnezP/zJ6yMXs3vcVPJ5ZR1BRI8yrTPZDIwPVo7uScCYndPILnzTgZf8lr/yyQmXsSMJL4sDWaWcmmqPI5keX5nwpgsYD9jIi+8MPcaFhHnm9CVxJwYuMNQoe9hEUnI9lOUj7sPhcni3Sb2QXL1/mMT+5BIwEfyax1bCK2TIi22XDgWIJuik3jWEekhUnnhZUoYySabcJnsXPQcIGx+t/xemXlSSVpMJZxFJKtIr1fo2Z9tCle0jwL09ZbZPrkaVQ5CaaJ70e1Uz9uX2i0cyetjjjs3MsdNU95+YsGW4psA/P8xWI5Us6OIQAbUoEXssnxezd4VBvDbz1XjhxYiwO8ut7ir2TQRwN5DZRjMorNdBpCm2Z5Ug1kV/NIjqYZ+3dDLVQCRY+1x+HuDbK7Of4x76dVEQNjSSRSmtIbVELb+u4ZCyfv3LkljdtTgZ9RiM07jcA17fxDQJWy5kdV6soZViyD23u4z8+PM8NNc61/7mhKZj7/7HLozLX4WP6qWTSYDHqgVF8Q+sRY/VScg8aMk0n3ONn37Mr3WBuFEdi2bHuzkV9ejBVpdy96BsJ52COncHW0ufjKX6tq+lkdanYY+52S59Qh7X7ch8CIA0YSJRyRNwBJq2L1H2GGEf/YIWSi/JfOIqITsEapr/zZPXZbV0ijXpFHek0aRIERB/JKCfCaOTZrD5iGn8zgvzYP9KfHWyGfD7Gyf9hNyAUH8oidwJJz13vbnTXiXdMRPdGTqUVFHRtWJEyk5yj4Q4gGT3PKwj4okNB95yKXp1Ryl3yD10amtK1wivujqFzTB3qOiGmLfLqqGQ+t6VcNRddHVkG6pR+r6ktvDkZ+7gbjw8yqz9HlVQR3hEVgpqyPTglF6k7+Z3Bb7FOXP+oM3wwhROG0szjq2KxoUvwOLBKPNwNMSr0JN5ZaJXyydcyWpGeWBA7y1wWwZcQxaen7KVKyZzuFVqWncMj07rLF19DH1VG6TZkZYniPyGgkJhv3NWW3oxoDDAxX+742AxBc1YqrnWiCZ1zWeOudji5JUf5D1H88nSK3GAN+GLSE0vuB4zxtwD+NX00PwC3EtQ772xgsq7hF4fCvsLcfwpjAerol2AcpdMsxPbTiOF/JyGxAuJxRZOd5QUpD3FTvm4rsLWj4YVv5jWPlvUhmMrvJ4sDLMp7SFYV0hZXoLWCO9MCHuMXqmmlc49B41es7mvJC6zOxsarkADrULPwTiYXrOLufrc6CJvM7zlQgunjkpOPX4YVCJLfXVCuiUXXFZySxLki2TyWQl3kkGb7U+l7UaVElcBXhE3lmd/05mQ2OkbxnLL89PzFXnTsp9LXdDriX369zO3OQFoxe8uqBqgWmBsECxcPTC6QuLFl5ZyOSNzcvKezzvP/O4vLy8kryjec68v+WNWrRr0elF3kUz89fmH8n/TX5r/p/zv82/lh+/+NnF2xd/s/jJJbOWLFpiWRJnuMfwoOEJw7OGXYb9hlrDCUOzod1wbyFb+EqhvnBBYWFhZeGBQr7wYuHkoneL/lAUVzyk+JniF4vLiquLvcWdxSkl40teKnGW/LXkbyXjSrNLS0s3lb5bur/0TOm3pUrjSGOW8QVjkbHZqCybVJZXllG+v/zL8geWvrG0Yunhpd8uVb/Jvjn9zVfe1L9Z+uasivfhPx7+k1U8WDGj4px3Zma99EXA7Y8ogp8EDMBPAvzJmTFZLbbkFhszgZkh4ZbcA7iJjyjw0nRpG/l8AHr5kttbbBhIba9XDp8TE1NSdwazLy6P2ftY6/J6J8AxC+Oxzq13OZyyWEwpOFp31zvPeTC3gZsR1sdp86TnpS9KbsFkjc3jvBCfWPI0NN3frLy99WR9cuIV2xRV9utIOXX4cc+F1PjjDpKqwP+fc1OCo6AmbTA2nhvgaOEVx61CvdGBpCclJ3Z51MOP41DJVoYxHbXU1Ned8Stba+ofnweNNoY5xc+ubwK2MxjxqyKXt9ppOye4WpJRdVQu/s7jLR7MIJ3iNceb4Ah0OS4gSslufemeXBt/TO0A69be0oT/f2nrMXXJ7btmT51smgRFaCMN8ARl78AMSEmtvvRIrk25RudXpA0xp/VjJ0wyun9TbVA1H7Opmq/YlOt0w/6KEi3VYWZlhU6dWZ+6TJeB1kcWuN1brdbWp76lg5p2jc4gC/TzVtuaS86UPpRb8pBeZSNyi09sHnW7d673uZH9kgclXvboX7fxnuMeW9EhRXNRmrz4odlFD00f2lzy+YXjAFeYL1qhoGjwwN6cp49XmJrvvv2zzH6b7068klsCsNmTzZcmNXgnKkrMl56Fp17BpzcUHi656J0IrVAuxUcWPEze506OC59cOUyuDCd3Aibnp5NLwuaU+KHDr8hvsbnlk4a7O6pvGQp/b7ElrdNZ325wNDnME592eh/z0L+OUw6bo8UB1tpxzqEoqTtSy8rOKP7yp4ai78pZ5uI426aUGPjzF0+DWKeZwMzB3ueSRyYMSPAkeGK8n9pAULzu+Pexmdb2dOB3eCNwfeIrVcttTOXs5ltIdvqbEG+ZyBv8gL0vCHtfUPYeaEREI2YlVaCCYI+cydbnGs95sNCiwEaFgSQzQZltIti6oBHittlopVyOlqGO9HOn+Np9TUT3WkD5EH0A6J+9rhGm2OLygIKlp9uatc13NN/ZfJetuUhcYLp0Pz1598mhtlz5Lv3s6UXmS9838p838t83NnfawO7pXig6crTusV+eOefCr+YeLJcxzLMvOoqOVNfYUz5rzmxOxu8RHEB5OBSH/dQa85mjtLkBtoIs8L8FS5mb",
            '32' => ""
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B06;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) Error("Can not allocate the data on RAM");

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
