<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',6);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

define('MESSAGE_OPCODE',38);
define('MES_OPCODE',77);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "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",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => "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"
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//This function will move messages from MTX to XMESSAGES it they overflow the size of the Spectrum bank
function moveMessagesToXmessages($adventure)
{
    // Skip this step if size of MTX is less than 128Kb
    if (getSizeMTX($adventure) <= 16*1024) return $adventure;

    // Find maximum xMessage index
    $xMessNextId = -1;
    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $xmsg = $adventure->xmessages[$i];
        if ($xmsg->Value > $xMessNextId) $xMessNextId = $xmsg->Value;
    }
    $xMessNextId += 1;

    // Extract messages until MTX is less than 16Kb
    $messagesToTransfer = array();
    while (getSizeMTX($adventure) > 16*1024)   //Do this until MTX is less than bank size.
    {
        $msg = array_pop($adventure->messages);
        $id = $msg->Value;
        $messagesToTransfer[$id] = $msg;
    }

    // Search for condacts with the extracted messages and rewrite transfered Messages for xMessages
    $messageToXMes = array();
    $mesToXMes = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if (($condact->Opcode == MES_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $mesToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $mesToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $mesToXMes[$msgId] = $xMessId;

                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MES into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;

                }
                elseif (($condact->Opcode == MESSAGE_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $messageToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $messageToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $messageToXMes[$msgId] = $xMessId;

                        // Since MESSAGE prints a NewLine at the end, we add it now:
                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $msg->Text = ($msg->Text).chr(13);
                        $msg->originalText = ($msg->originalText).chr(13);
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MESSAGE into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;
                }
            }
        }
    }
    return $adventure;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B06;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Move messages to xMessages if MTX is too big
$adventure = moveMessagesToXmessages($adventure);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

if ($adventure->verbose) echo "Blocks to assign:\n";
foreach($blockSize as $currBlock => $bSize)
{
    if ($adventure->verbose) echo "Block $currBlock: $bSize bytes.\n";
    if ($bSize > 16*1024)
    {
        Error("Block " . $currBlock . " has more of 16kb, can not be allocated!\n");
    }
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) {
    echo "Unassigned blocks:\n";
    foreach($blockBank as $currBlock => $bIndex)
    {
        if ($bIndex == -1)
        {
            $bSize = $blockSize[$currBlock];
            echo "Block $currBlock: $bSize bytes not assigned!\n";
        }
    }
    Error("Can not allocate the data on RAM");
}

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
