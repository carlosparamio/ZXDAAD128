<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',5);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "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",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => "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"
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B04;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) Error("Can not allocate the data on RAM");

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
